/*
 * File: app/store/logs.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SxapiManager.store.logs', {
    extend: 'Ext.data.Store',

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            autoLoad: true,
            autoSync: true,
            remoteFilter: true,
            remoteSort: true,
            storeId: 'logs',
            proxy: {
                type: 'rest',
                extraParams: {
                    format: 'json'
                },
                url: 'http://127.0.0.1/git/startx_api/api/logs',
                reader: {
                    type: 'json',
                    idProperty: '_id',
                    root: 'data'
                },
                writer: {
                    type: 'json',
                    allowSingle: false
                }
            },
            fields: [
                {
                    name: '_id',
                    type: 'string'
                },
                {
                    name: 'type',
                    type: 'string'
                },
                {
                    name: 'message',
                    type: 'string'
                },
                {
                    name: 'session',
                    type: 'string'
                },
                {
                    name: 'date',
                    type: 'date'
                },
                {
                    name: 'level',
                    type: 'int'
                },
                {
                    name: 'code',
                    type: 'int'
                },
                {
                    name: 'ip',
                    type: 'string'
                }
            ],
            listeners: {
                write: {
                    fn: me.onJsonstoreWrite,
                    scope: me
                }
            }
        }, cfg)]);
    },

    onJsonstoreWrite: function(store, operation, options) {
        var record = operation.getRecords()[0],
            name = Ext.String.capitalize(operation.action),
            verb;


        if (name == 'Destroy') {
            record = operation.records[0];
            verb = 'Destroyed';
        } else {
            verb = name + 'd';
        }
        console.log(name, Ext.String.format("{0} user: {1}", verb, record.getId()));
    }

});