/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.Loader.setConfig({
    enabled: true
});

Ext.application({
    views: [
        'loading',
        'init',
        'main'
    ],
    autoCreateViewport: true,
    name: 'SxapiManager',
    controllers: [
        'Session',
        'Log'
    ],

    launch: function() {

        SxapiManagerloadingView = Ext.create('SxapiManager.view.loadingView');
        SxapiManagerloadingView.show();
        Ext.getCmp('loadingmessagebox').update('... initialisation ...');
        // on test l'existence du store de session
        console.log(Ext.getStore('sessionStore'));
        if(!Ext.getStore('sessionStore'))
        Ext.create('SxapiManager.store.sessionStore');
        console.log(Ext.getStore('sessionStore'));
        // on charge la session
        Ext.getStore('sessionStore').load({
            callback: this.onLoadSessionStore,
            scope: this
        });
    },

    onLoadSessionStore: function(records, operation, success) {
        if(success) {
            Ext.Msg.alert('OK', "OK pour le serveur");
        }
        else {
            Ext.Msg.alert('Error', "Erreur de communication avec le serveur");
        }
        if(success) {
            var response = operation.response;
            if(response.code !== undefined && response.code !== '' && response.code != 'ok') {
                Ext.Msg.alert('Error', "Erreur de réponse du serveur<br/>"+response.message);
            }
            else {
                var sessinfo = records[0].getData();
                // on test l'existence du store de user
                if(!Ext.getStore('userStore'))
                Ext.create('Startx.store.userStore');
                if(sessinfo.dend > new Date()) {
                    Ext.getCmp('loadingmessagebox').update("... session "+sessinfo.id+" ouverte ...");
                    Ext.getStore('userStore').load({
                        callback: this.onLoadUserStore,
                        scope: this
                    });
                }
                else {
                    Ext.getCmp('loadingmessagebox').update("... session périmée ...");
                    goapp = this;
                    Startx.wsd.Session.SessionLogout(function(provider, response) {
                        if(response.code == 'ok'){
                            Ext.getCmp('loadingmessagebox').update('... session cloturée ...');
                            Ext.getStore('sessionStore').load({
                                callback: function(records, operation,success) {
                                    if(success) {
                                        Ext.getCmp('loadingmessagebox').update('... session renouvellée ...');
                                        Ext.getStore('userStore').load({
                                            callback: goapp.onLoadUserStore,
                                            scope: goapp
                                        });
                                    }
                                    else {
                                        Ext.Msg.alert('Error', "Erreur de communication avec le serveur");
                                    }

                                },
                                scope: this
                            });
                        }
                        else {
                            Ext.Msg.alert('Error', response.message);
                        }
                    });
                }
            }
        }
        else {
            Ext.Msg.alert('Error', "Erreur de communication avec le serveur");
        }

    }

});
